generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = env("PRISMA_BINARY_TARGETS")
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// USER
model User {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(350)
  emailVerified DateTime? @map("email_verified")
  image         String    @default("") @db.VarChar(500)
  password      String    @db.VarChar(500)
  isAdmin       Boolean   @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Account   Account[]
  Session   Session[]

  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// PRODUCT

enum ProductCategory {
  HOODIE
  PALAZZO
  SUIT
  T_SHIRT

  @@map(name: "product_category")
}

enum Size {
  XS
  S
  M
  L
  XL

  @@map(name: "size")
}

model Product {
  id Int @id @default(autoincrement())

  name         String @db.VarChar(200)
  description  String @db.VarChar(20000)
  color        String @db.VarChar(100)
  price        Float
  productImage String @db.VarChar(500)

  category_name ProductCategory
  product_item  ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "product")
}

model ProductItem {
  id Int @id @default(autoincrement())

  qty_in_stock Int
  // cart_id Int
  // cart    Cart @relation(fields: [cart_id], references: [id])

  product_id Int
  product    Product @relation(fields: [product_id], references: [id])

  size    Size
  article String @db.VarChar(100)

  // order_line OrderLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "product_item")
}
